@import "./base";
@import "./ckeditor";
@import "./checkbox";
@import "./datepicker";
@import "./filepond";
@import "./mixins";
@import "./select";
@import "./switch";
@import "./uploaders";

// This is to get rid of the blue-background that Chrome sometimes sets on
// auto-fill fields.
button:-webkit-autofill,
button:-webkit-autofill:hover,
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
input.ant-input:-webkit-autofill,
input.ant-input:-webkit-autofill:hover,
input.ant-input:-webkit-autofill:focus,
.ant-input-number-focused,
.ant-input-number:-webkit-autofill,
.ant-input-number:-webkit-autofill:hover,
.ant-input-number:-webkit-autofill:focus,
.ant-input-number .ant-input-number-input-wrap:-webkit-autofill,
.ant-input-number .ant-input-number-input-wrap:-webkit-autofill:hover,
.ant-input-number .ant-input-number-input-wrap:-webkit-autofill:focus,
.ant-input-number .ant-input-number-input-wrap input:-webkit-autofill,
.ant-input-number .ant-input-number-input-wrap input:-webkit-autofill:hover,
.ant-input-number .ant-input-number-input-wrap input:-webkit-autofill:focus,
textarea:-webkit-autofill,
textarea:-webkit-autofill:hover,
textarea:-webkit-autofill:focus,
select:-webkit-autofill,
select:-webkit-autofill:hover,
input:focus,
textarea:focus,
.ant-input-affix-wrapper:focus,
.ant-input-affix-wrapper-focused,
select:-webkit-autofill:focus {
  box-shadow: 0 0 0px 1000px $gray-light inset !important;
  -webkit-box-shadow: 0 0 0px 1000px $gray-light inset !important;
}

input:-webkit-autofill::first-line {
  font-size: $medium-text-size;
  color: $text-primary !important;
  font-family: $avenir;
  font-weight: 500;
  width: 100%;
  line-height: 16px;
}

input:focus-visible {
  outline: none !important;
}

.ant-input:hover {
  border-color: $transparent !important;
}

.input {
  @extend .input-base;
  @include input_size_standard();
}

// The generic `input` class is applied to the wrapping component.  The actual
// HTML <input> element does not have this class applied and is a child of this
// wrapping component.
span.input {
  @extend .input-base;
  @include input_size_standard();

  .ant-input-prefix {
    margin-right: 10px;
    svg {
      color: #c6c6c6;
    }
  }

  > input {
    @extend .input-base;
    font-size: inherit !important;
    height: 100%;
    border-radius: 0px !important;
    line-height: inherit !important;
  }
}

// For purposes of wrapping a raw HTML <input> element and looking like a styled
// <Input> component, when we cannot use the <Input> component.  Currently, this is
// only used for the <InputOnFocus> component.
.input-div {
  @extend .input;

  input {
    @extend .input-base;
    height: 100%;
  }

  // Tightly wraps the component that is rendered on blur such that a click inside
  // of `input-div-content` (i.e. the component that is rendered on blur) can have
  // it's propogation stopped.  This is required to allow clickable elements to
  // be rendered inside the `input-div`.
  .input-div-content {
    width: fit-content;
    // Line height of input text.  This is required so that the "input" AKA div
    // does not change height when the input is hidden.
    height: 22px !important;
    line-height: 22px !important;

    > * {
      line-height: 24px;
      font-family: $avenir;
      font-weight: 500;
      font-size: $medium-text-size;
      letter-spacing: normal;
      padding-left: 2px;
      vertical-align: unset !important;
    }
  }
}

// The textarea element only supports one size for now, the standard size.
textarea.text-area {
  @extend .input-base;
  @include input_framework();
  min-height: $standard-size !important;
}

.image-and-name {
  display: flex;
  height: 100%;
  font-size: 24px;
  line-height: 64px;
  font-weight: 700 !important;
  width: 100%;

  .user-image-uploader {
    aspect-ratio: 1;
  }

  .name-wrapper {
    margin-left: 12px;
    display: flex;
    height: 100%;

    .name {
      &:not(:first-child) {
        margin-left: 8px;
      }
    }
  }
}

.public-url-input {
  display: flex;
  flex-direction: row;

  > .input {
    margin-right: 4px;

    &.disabled,
    &:disabled {
      cursor: pointer !important;
    }
  }

  .public-url-actions {
    display: flex;
    flex-direction: row;
  }
}
